from typing import List, Tuple
import heapq
from collections import deque
import matplotlib.pyplot as plt
class SearchAlgorithm:
    @staticmethod
    def get_neighbors(x: int, y: int, grid: List[List[str]]) -> List[Tuple[int, int]]:
        directions = []  # Right, Down, Left, Up
        if x > 0 and grid[x - 1][y] != '-1':  # Up
            directions.append((x - 1, y))
        if y < len(grid[0]) - 1 and grid[x][y + 1] != '-1':  # Right
            directions.append((x, y + 1))
        if x < len(grid) - 1 and grid[x + 1][y] != '-1':  # Down
            directions.append((x + 1, y))
        if y > 0 and grid[x][y - 1] != '-1':  # Left
            directions.append((x, y - 1))
        return directions

    @staticmethod
    def get_start_target(grid: List[List[str]]) -> Tuple[Tuple[int, int], Tuple[int, int]]:
        start, target = None, None
        for i in range(len(grid)):  # For row only
            for j in range(len(grid[0])):  # For column only
                if grid[i][j] == 'S':
                    start = (i, j)
                elif grid[i][j] == 'T':
                    target = (i, j)
        return start, target

    @staticmethod
    def ucs(grid: List[List[str]]) -> Tuple[int, List[List[str]]]:
        start, target = SearchAlgorithm.get_start_target(grid)
        if not start or not target:
            return -1, grid
        # Create a deep copy of the grid for result
        result_grid = [row[:] for row in grid]
        # Priority queue: (cost, counter, position, path)
        pq = []
        heapq.heappush(pq, (0, 0, start, [start]))
        # Track visited cells
        visited = set([start])
        # Track exploration order (excluding start and target)
        exploration_sequence = []
        # Counter for tie-breaking
        counter = 1
        final_path = None
        while pq:
            cost, _, (x, y), path = heapq.heappop(pq)
            # If we reached the target
            if (x, y) == target:
                final_path = path
                break
            # Explore neighbors
            for nx, ny in SearchAlgorithm.get_neighbors(x, y, grid):
                if (nx, ny) not in visited:
                    visited.add((nx, ny))
                    # Add to exploration sequence if not start or target
                    if grid[nx][ny] not in ['S', 'T']:
                        exploration_sequence.append((nx, ny))
                    heapq.heappush(pq, (cost + 1, counter, (nx, ny), path + [(nx, ny)]))
                    counter += 1
        # If no path found
        if not final_path:
            return -1, grid
        # Mark all explored cells with their exploration sequence number
        # enumerate allows you to keep track of the number of iterations (loops) in a loop
        for idx, (x, y) in enumerate(exploration_sequence, 1):
            if result_grid[x][y] not in ['S', 'T']:
                result_grid[x][y] = str(idx)
        return len(final_path) - 1, result_grid
    # Implement Depth First Search
    @staticmethod
    def dfs(grid: List[List[str]]) -> Tuple[int, List[List[str]]]:
        start, target = SearchAlgorithm.get_start_target(grid)
        if not start or not target:
            return -1, grid
        # Create a deep copy of the grid for result
        result_grid = [row[:] for row in grid]
        stack = [(start, [start])]
        visited = set()
        while stack:
            (x, y), path = stack.pop()
            if (x, y) == target:
                # Mark the path in the result grid with path costs
                path_cost = 0
                for px, py in path:
                    if result_grid[px][py] not in ['S', 'T']:
                        result_grid[px][py] = str(path_cost)
                    path_cost += 1
                return len(path) - 1, result_grid
            if (x, y) not in visited:
                visited.add((x, y))
                for neighbor in SearchAlgorithm.get_neighbors(x, y, grid):
                    if neighbor not in visited:
                        stack.append((neighbor, path + [neighbor]))
        return -1, grid
    # Implement Breadth First Search
    @staticmethod
    def bfs(grid: List[List[str]]) -> Tuple[int, List[List[str]]]:
        start, target = SearchAlgorithm.get_start_target(grid)
        if not start or not target:
            return -1, grid
        # Create a deep copy of the grid for result
        result_grid = [row[:] for row in grid]
        # Queue stores (position, path)
        queue = deque([(start, [start])])
        visited = set()
        while queue:
            (x, y), path = queue.popleft()
            if (x, y) == target:
                # Mark the path in the result grid with path costs
                path_cost = 0
                for px, py in path:
                    if result_grid[px][py] not in ['S', 'T']:
                        result_grid[px][py] = str(path_cost)
                    path_cost += 1
                return len(path) - 1, result_grid

            # Explore all neighbors (Up, Right, Down, Left)
            for nx, ny in SearchAlgorithm.get_neighbors(x, y, grid):
                if (nx, ny) not in visited:
                    visited.add((nx, ny))  # Mark as visited immediately when added to queue
                    queue.append(((nx, ny), path + [(nx, ny)]))
        return -1, grid
    # Implement Best First Search
    @staticmethod
    def best_first_search(grid: List[List[str]]) -> Tuple[int, List[List[str]]]:
        return -1, grid
    # Implement A* Search
    @staticmethod
    def a_star_search(grid: List[List[str]]) -> Tuple[int, List[List[str]]]:
        return -1, grid
if __name__ == "__main__":
    example = [
        ['0', '0', '0', '0'],
        ['0', '-1', '-1', 'T'],
        ['S', '0', '-1', '0'],
        ['0', '0', '0', '-1']
    ]
    # DFS
    result_dfs, final_grid_dfs = SearchAlgorithm.ucs(example)
    print("UCS Result:", result_dfs)
    print("UCS Path:")
    for row in final_grid_dfs:
        print(row)
    print()
